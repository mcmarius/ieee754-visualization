// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null) {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		return function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
	};
	return getRequire(modules, [], '');
})({
	"ieee754-visualization": {
		"src": {
			"bits.js": function (exports, module, require) {
				const ieee754 = require("./ieee754");
				const dom = require("./dom");

				const visualization = dom.$(".visualization-bits");
				const numberInput = dom.$("#number-input");
				const fpType = dom.$("#fp-type");

				const ftMap = {
				    fp32: {
				        expNormZero: -127,
				        expNormValue: 127,
				        expNormPosValue: 127,
				        expNormNegValue: -127,
				        dynksMin: -127,
				        dynksMax: 128,
				        exponentBits: 8,
				        significandBits: 23
				    },
				    fp64: {
				        expNormZero: -1023,
				        expNormValue: 1023,
				        expNormPosValue: 1023,
				        expNormNegValue: -1023,
				        dynksMin: -1023,
				        dynksMax: 1024,
				        exponentBits: 11,
				        significandBits: 52
				    }
				}

				function classNameFilter(className) {
				    return function (bit) {
				        return bit.classList.contains(className) && bit.classList.contains(fpType.value);
				    };
				}

				//
				// function keepVisibleBits(bits ){
				//     return bits.map(bit => bit.classList.contains(fpType.value) || [].slice.call(bit.classList).every(x => x !== "fp32" && x !== "fp64"));
				// }

				const bits = dom.$$(".bit", visualization);

				function bitsSign() {
				    return bits.filter(classNameFilter("sign"));
				}

				function bitsExponent() {
				    return bits.filter(classNameFilter("exponent"));
				}

				function bitsSignificand() {
				    return bits.filter(classNameFilter("significand"));
				}

				const pointSlider = dom.$("#point-slider");
				const pointSliderLabel = dom.$("#point-slider-label");

				function getInputNumberValue() {
				    return Number(numberInput.value.replace(/\u2212/g, "-"));
				}

				function setNumberInputValue(value) {
				    value = Number(value);
				    if (value === 0 && (1 / value < 0)) {
				        // special case to detect and show negative zero
				        value = "-0";
				    } else {
				        value = Number.prototype.toString.call(value);
				    }

				    value = value.replace(/-/g, "\u2212"); //pretty minus

				    if (value !== numberInput.value) {
				        numberInput.value = value;
				    }
				    updateVisualization();
				}


				function updateBitElementClasses( bitElements, bits, prevBit ) {
				    prevBit = typeof prevBit == "string" ? prevBit.slice(-1) : "0";
				    // console.log("updateBitElementClasses: " + bits.length);
				    for (let i = 0; i < bits.length; i++) {
				        const bitElement = bitElements[i];
				        bitElement.classList.remove("one");
				        bitElement.classList.remove("zero");
				        bitElement.classList.remove("prev-one");
				        bitElement.classList.remove("prev-zero");

				        bitElement.classList.add(bits[i] === "1" ? "one" : "zero");
				        if (i === 0) {
				            bitElement.classList.add(prevBit === "1" ? "prev-one" : "prev-zero");
				        }
				    }
				}


				function updateBinary( parsed ) {
				    const isExpandedMode = visualization.classList.contains("expanded");
				    // console.log('parsed: ', parsed);
				    const bitsHidden = bits.filter(classNameFilter("hidden"));
				    updateBitElementClasses(bitsSign(), parsed.bSign);
				    updateBitElementClasses(bitsExponent(), parsed.bExponent, isExpandedMode ? "0" : parsed.bSign);
				    updateBitElementClasses(bitsHidden, parsed.bHidden);
				    updateBitElementClasses(bitsSignificand(), parsed.bSignificand, isExpandedMode ? parsed.bHidden : parsed.bExponent);

				    pointSliderLabel.style.left = (parsed.exponentNormalized - 1) * 15 + "px";

				    if (parsed.exponent !== Number(pointSlider.value)) {
				        pointSlider.value = parsed.exponent;
				    }
				}


				function classNamesToBinaryString( binaryString, bitSpan ) {
				    binaryString += bitSpan.classList.contains("zero") ? "0" : "1";
				    return binaryString;
				}

				function updateNumber( values ) {
				    let b = "";

				    let exponent, significand;
				    // console.log("hm...", values);
				    if (values) {
				        exponent = values.exponent;
				        // significand = values.significand;
				    }

				    if (typeof exponent == "number") {
				        exponent = ieee754.intToBinaryString(exponent, 11);
				    } else {
				        exponent = bitsExponent().reduce(classNamesToBinaryString, "");
				    }
				    // console.log('type: ', fpType.value);
				    // console.log('bits:', bits.filter(classNameFilter(fpType.value)));
				    // console.log('be: ' + bitsExponent().map(x => x.classList));
				    // console.log('bs: ' + bitsSignificand().map(x => x.classList));
				    if (typeof significand != "string") {
				        significand = bitsSignificand().reduce(classNamesToBinaryString, "");
				    }
				    // console.log('e: ', exponent);
				    // console.log('s: ', significand);

				    b += bitsSign().reduce(classNamesToBinaryString, "");
				    b += exponent;
				    b += significand;

				    let f = "";
				    if (fpType.value === "fp32")
				        f = ieee754.binaryStringToFloat32(b);
				    else if (fpType.value === "fp64")
				        f = ieee754.binaryStringToFloat64(b);
				    setNumberInputValue(f);
				}


				function generatePowersHtml( b, startPower, classPrefix, useOne ) {
				    if (typeof startPower != "number") {
				        startPower = b.length - 1;
				    }

				    classPrefix = classPrefix || "exponent-bit-";

				    let htmlPowers = "";
				    let htmlComputed = "";
				    let htmlFractions = "";
				    let htmlFractionsComputed = "";

				    let allZeros = true;
				    for (let i = 0, l = b.length; i < l; i++) {
				        if (b[i] === "1") {
				            allZeros = false;
				            const p = startPower - i;
				            const j = b.length - 1 - i;
				            if (htmlPowers.length > 0) {
				                htmlPowers += "<span class='mo'> + </span>";
				                htmlComputed += "<span class='mo'> + </span>";
				                htmlFractions += "<span class='mo'> + </span>";
				                htmlFractionsComputed += "<span class='mo'> + </span>";
				            }

				            let powerHtml = '<span class="msup ' + (classPrefix + j) + '"><span class="mn">2</span><span class="mn">' + p + '</span></span>';

				            if (useOne && p === 0) {
				                powerHtml = '<span class="mn ' + (classPrefix + j) + '">1</span>';
				            }
				            htmlPowers += powerHtml;
				            htmlComputed += '<span class="mn ' + (classPrefix + j) + '">' + Math.pow(2, p) + '</span>';

				            if (p >= 0) {
				                htmlFractions += powerHtml;
				                htmlFractionsComputed += '<span class="mn ' + (classPrefix + j) + '">' + Math.pow(2, p) + '</span>';
				            } else {
				                htmlFractions += '<span class="mfrac ' + (classPrefix + j) + '"><span class="mn">1</span><span class="msup"><span class="mn">2</span><span class="mn">' + -p + '</span></span></span>';
				                htmlFractionsComputed += '<span class="mfrac ' + (classPrefix + j) + '"><span class="mn">1</span><span class="mn">' + Math.pow(2, -p) + '</span></span>';
				            }
				        }
				    }

				    if (allZeros) {
				        htmlPowers = htmlComputed = htmlFractions = htmlFractionsComputed = '<span class="mn">0</span>';
				    }

				    htmlFractionsComputed = htmlFractionsComputed.replace(/Infinity/g, "&infin;");

				    return {
				        powers: htmlPowers,
				        computed: htmlComputed,
				        fractions: htmlFractions,
				        fractionsComputed: htmlFractionsComputed
				    };
				}

				function updateMath( representation ) {
				    // enrich representation with powers HTML

				    const htmlExponent = generatePowersHtml(representation.bExponent);

				    representation.exponentPowers = htmlExponent.powers;
				    representation.exponentPowersComputed = htmlExponent.computed;

				    const significandBits = representation.bHidden + representation.bSignificand;

				    representation.exponentZero = representation.exponent;
				    representation.exponentNormalizedZero = representation.exponentNormalized;


				    // [...] subnormal numbers are encoded with a biased exponent of 0,
				    // but are interpreted with the value of the smallest allowed exponent,
				    // which is one greater (i.e., as if it were encoded as a 1).
				    //
				    // -- http://en.wikipedia.org/wiki/Denormal_number
				    // console.log("aaa0: "+fpType.value);
				    if (representation.exponentNormalizedZero === ftMap[fpType.value].expNormZero) {
				        // console.log("aaaa: "+fpType.value);
				        representation.exponentZero = representation.exponent + 1;
				        representation.exponentNormalizedZero = representation.exponentNormalized + 1;
				    }

				    const htmlSignificand = generatePowersHtml(significandBits, representation.exponentNormalizedZero, "significand-bit-");
				    const htmlSignificandNormalized = generatePowersHtml(significandBits, 0, "significand-bit-");
				    const htmlSignificandNormalizedOne = generatePowersHtml(significandBits, 0, "significand-bit-", true);

				    representation.significandPowersNormalized = htmlSignificandNormalized.powers;
				    representation.significandPowersNormalizedOne = htmlSignificandNormalizedOne.powers;

				    const equation = dom.$(".full-equation");

				    if (isNaN(representation.value)) {
				        representation.significandPowers = representation.significandPowersFractions
				            = representation.significandPowersFractionsComputed = representation.significandPowersComputed
				            = '<span class="mn significand-bit-any">NaN</span>';
				    } else {
				        representation.significandPowers = htmlSignificand.powers;
				        representation.significandPowersFractions = htmlSignificand.fractions;
				        representation.significandPowersFractionsComputed = htmlSignificand.fractionsComputed;
				        representation.significandPowersComputed = htmlSignificand.computed;
				    }

				    if (representation.sign < 0)
				        representation.signHtml = String(representation.sign).replace("-", "&minus;");
				    else
				        representation.signHtml = "+" + representation.sign;

				    representation.absValue = Math.abs(representation.value);

				    if (isNaN(representation.absValue)) {
				        representation.absValue = "NaNNaNNaNNaN Batman!"
				    }

				    representation.expNormPosValue = ftMap[fpType.value].expNormPosValue;
				    representation.expNormNegValue = ftMap[fpType.value].expNormNegValue;

				    dom.$$(".msum").forEach(elem => elem.setAttribute('data-to', ftMap[fpType.value].significandBits));
				    dom.$("#msub-text").innerHTML = ftMap[fpType.value].significandBits;

				    const dynamic = dom.$$(".math [data-ieee754-value]");

				    dynamic.forEach(function (element) {
				        element.innerHTML = representation[element.dataset.ieee754Value];
				    });

				    if (isNaN(representation.value) || !isFinite(representation.value)) {
				        equation.classList.add("collapsed");
				    } else {
				        equation.classList.remove("collapsed");
				    }
				}

				function updateVisualization() {
				    const number = getInputNumberValue();
				    // console.log('upviz: ', number, fpType.value);
				    let representation = ieee754.toIEEE754Parsed(number, fpType.value);

				    updateBinary(representation);
				    updateMath(representation);
				}


				// EVENT HANDLERS

				fpType.addEventListener('change', function () {
				    dom.$$('.fp32').forEach(elem => elem.style.display = 'none')
				    dom.$$('.fp64').forEach(elem => elem.style.display = 'none')
				    dom.$$('.' + this.value).forEach(elem => elem.style = '')
				    updateVisualization();
				});


				numberInput.addEventListener("change", function () {
				    setNumberInputValue(getInputNumberValue());
				}, false);


				numberInput.addEventListener("keydown", function (event) {
				    let diff = 0;
				    if (event.keyCode === 38 || event.keyCode === 40) {

				        if (event.keyCode === 38) diff = +1;
				        else diff = -1;

				        if (event.shiftKey) {
				            diff *= 10;
				            if (event.altKey) {
				                diff *= 10;
				            }
				        } else if (event.altKey) {
				                diff /= 10;
				            }

				            setNumberInputValue( diff + getInputNumberValue() );

				        event.preventDefault();
				    }
				}, false);


				pointSlider.addEventListener( "change", function() {
				    const exponent = Number(pointSlider.value);
				    updateNumber( { exponent: exponent } );
				}, false);

				pointSlider.addEventListener( "click", function() {
				    pointSlider.focus();
				}, false);

				document.body.addEventListener( "click", function( event ){
				    const target = event.target;

				    if (target.classList.contains("zero") || target.classList.contains("one")) {
				        target.classList.toggle("zero");
				        target.classList.toggle("one");

				        updateNumber();
				        updateVisualization();

				        hoverRelatedExponentHandler( event );
				        hoverRelatedSignificandHandler( event );
				        hoverRelatedSignHandler( event );
				    }

				}, false);


				// toggle hover class on parts of equation related to hovered bit
				function createHoverRelatedHandler( selector, classPrefix ) {
				    return function (event) {
				        const target = event.target;
				        if (dom.matchesSelector( target, selector )) {

				            const siblings = dom.arrayify(target.parentNode.children).filter(classNameFilter("bit"));
				            const n = siblings.length - siblings.indexOf(target) - 1;

				            const related = dom.$$((classPrefix + n) + "," + (classPrefix + "any"));
				            related.forEach(function (r) {
				                r.classList[event.type === "mouseout" ? "remove" : "add"]("hover");
				            });
				        }
				    };
				}

				const hoverRelatedExponentHandler = createHoverRelatedHandler(".bit.exponent", ".exponent-bit-");
				document.body.addEventListener( "mouseover", hoverRelatedExponentHandler, false );
				document.body.addEventListener( "mouseout", hoverRelatedExponentHandler, false );

				const hoverRelatedSignificandHandler = createHoverRelatedHandler(".bit.significand, .bit.hidden", ".significand-bit-");
				document.body.addEventListener( "mouseover", hoverRelatedSignificandHandler, false );
				document.body.addEventListener( "mouseout", hoverRelatedSignificandHandler, false );

				const hoverRelatedSignHandler = createHoverRelatedHandler(".bit.sign", ".sign-bit-");
				document.body.addEventListener( "mouseover", hoverRelatedSignHandler, false );
				document.body.addEventListener( "mouseout", hoverRelatedSignHandler, false );


				// toggle nowrap class on a equation row when equals sign is clicked

				document.body.addEventListener( "click", function( event ){
				    const target = event.target;

				    if (dom.matchesSelector(target, ".mrow > .equals")) {
				        target.parentNode.classList.toggle("nowrap");
				    }

				}, false);


				// make exponent value editable

				const dynks = require("./dynks");

				const exponentElement = dom.$("#exponent-dynks");
				const exponentNormalizedElement = dom.$("#exponent-normalized-dynks");

				function getCurrentExponentValue() {
				    return +exponentElement.innerHTML;
				}

				function updateExponentValue(value) {
				    const exponent = Number(value);
				    updateNumber({exponent: exponent});
				}

				dynks(exponentElement, getCurrentExponentValue, updateExponentValue);

				function getCurrentExponentNormalizedValue() {
				    exponentNormalizedElement.dataset.dynksMin = ftMap[fpType.value].dynksMin;
				    exponentNormalizedElement.dataset.dynksMax = ftMap[fpType.value].dynksMax;
				    return +exponentNormalizedElement.innerHTML;
				}

				function updateExponentNormalizedValue(value) {
				    const exponent = Number(value);
				    updateNumber({exponent: exponent + ftMap[fpType.value].expNormValue});
				}
				dynks( exponentNormalizedElement, getCurrentExponentNormalizedValue, updateExponentNormalizedValue );


				dom.$(".toggle-details-button").addEventListener("click", function(){
				    visualization.classList.toggle("expanded");
				}, false);

				// GO!

				updateVisualization();
			},
			"dom.js": function (exports, module, require) {
				// `arraify` takes an array-like object and turns it into real Array
				// to make all the Array.prototype goodness available.
				const arrayify = function (a) {
				    return [].slice.call(a);
				};

				// `$` returns first element for given CSS `selector` in the `context` of
				// the given element or whole document.
				const $ = function (selector, context) {
				    context = context || document;
				    return context.querySelector(selector);
				};

				// `$$` return an array of elements for given CSS `selector` in the `context` of
				// the given element or whole document.
				const $$ = function (selector, context) {
				    context = context || document;
				    return arrayify(context.querySelectorAll(selector));
				};

				exports.arrayify = arrayify;
				exports.$ = $;
				exports.$$ = $$;


				// cross-browser matchesSelector based on
				// https://gist.github.com/jonathantneal/3062955
				const ElementPrototype = window.Element.prototype;

				const matchesSelector = ElementPrototype.matchesSelector ||
				    ElementPrototype.mozMatchesSelector ||
				    ElementPrototype.msMatchesSelector ||
				    ElementPrototype.oMatchesSelector ||
				    ElementPrototype.webkitMatchesSelector ||
				    function (selector) {
				        let node = this, nodes = (node.parentNode || node.document).querySelectorAll(selector), i = -1;

				        while (nodes[++i] && nodes[i] !== node) ;

				        return !!nodes[i];
				    };

				exports.matchesSelector = function( element, selector ) {
				    return matchesSelector.call( element, selector );
				}
			},
			"dynks.js": function (exports, module, require) {
				
				module.exports = function ( target, getCurrentValue, callback ) {

				    target.classList.add("dynks-enabled");

				    const options = {
				        gap: target.dataset.dynksGap || 5,
				        min: !isNaN(parseInt(target.dataset.dynksMin)) ? +target.dataset.dynksMin : -Infinity,
				        max: !isNaN(parseInt(target.dataset.dynksMax)) ? +target.dataset.dynksMax : +Infinity
				    };

				    target.addEventListener("mousedown", function (mouseDownEvent) {
				        const initialPosition = mouseDownEvent.pageX;
				        let lastValue = Number(getCurrentValue());
				        let lastSlot = 0;

				        function handleMouseMove(mouseMoveEvent) {
				            let currentSlot = (mouseMoveEvent.pageX - initialPosition) / options.gap;
				            currentSlot = ~~currentSlot;

				            const slotDiff = currentSlot - lastSlot;

				            if (slotDiff !== 0) {
				                let multiplier = 1;
				                if (mouseMoveEvent.shiftKey) multiplier = 10;

				                let currentValue = lastValue + slotDiff * multiplier;

				                if (currentValue < options.min) {
				                    currentValue = options.min;
				                    target.classList.add("dynks-out-of-range");
				                } else if (currentValue > options.max) {
				                    currentValue = options.max;
				                    target.classList.add("dynks-out-of-range");
				                } else {
				                    target.classList.remove("dynks-out-of-range");
				                }

				                callback( currentValue );

				                if (lastValue !== currentValue) {
				                    lastValue = currentValue;
				                    lastSlot = currentSlot;
				                }
				            }

				            mouseMoveEvent.preventDefault();
				        }

				        function handleMouseUp() {
				            target.classList.remove("dynks-active");
				            target.classList.remove("dynks-out-of-range");
				            document.documentElement.classList.remove("dynks-moving");
				            document.removeEventListener("mousemove", handleMouseMove, false );
				            document.removeEventListener("mouseup", handleMouseUp, false );
				        }

				        document.addEventListener( "mousemove", handleMouseMove, false );
				        document.addEventListener( "mouseup", handleMouseUp, false );

				        target.classList.add("dynks-active");
				        document.documentElement.classList.add("dynks-moving");

				        mouseDownEvent.preventDefault();
				    }, false );

				};
			},
			"ieee754.js": function (exports, module, require) {
				// float32ToOctets( 123.456 ) -> [ 66, 246, 233, 121 ]
				function float32ToOctets(number) {
				    const buffer = new ArrayBuffer(4);
				    new DataView(buffer).setFloat32(0, number, false);
				    return [].slice.call(new Uint8Array(buffer));
				}

				// octetsToFloat32( [ 66, 246, 233, 121 ] ) -> 123.456
				function octetsToFloat32(octets) {
				    const buffer = new ArrayBuffer(4);
				    new Uint8Array(buffer).set(octets);
				    return new DataView(buffer).getFloat32(0, false);
				}

				// float64ToOctets( 123.456 ) -> [ 64, 94, 221, 47, 26, 159, 190, 119 ]
				function float64ToOctets(number) {
				    const buffer = new ArrayBuffer(8);
				    new DataView(buffer).setFloat64(0, number, false);
				    return [].slice.call(new Uint8Array(buffer));
				}

				// octetsToFloat64( [ 64, 94, 221, 47, 26, 159, 190, 119 ] ) -> 123.456
				function octetsToFloat64(octets) {
				    const buffer = new ArrayBuffer(8);
				    new Uint8Array(buffer).set(octets);
				    return new DataView(buffer).getFloat64(0, false);
				}

				// intToBinaryString( 8 ) -> "00001000"
				function intToBinaryString(i, length) {
				    length = length || 8;
				    for (i = i.toString(2); i.length < length; i = "0" + i) ;
				    return i;
				}

				// binaryStringToInt( "00001000" ) -> 8
				function binaryStringToInt(b) {
				    return parseInt(b, 2);
				}

				function octetsToBinaryString(octets) {
				    return octets.map(function (i) {
				        return intToBinaryString(i);
				    }).join("");
				}

				// function float32ToBinaryString( number ) {
				//     return octetsToBinaryString( float32ToOctets( number ) );
				// }

				function binaryStringToFloat32(string) {
				    // console.log(string);
				    return octetsToFloat32(string.match(/.{8}/g).map(binaryStringToInt));
				}

				// function float64ToBinaryString( number ) {
				//     return octetsToBinaryString( float64ToOctets( number ) );
				// }

				function binaryStringToFloat64(string) {
				    return octetsToFloat64(string.match(/.{8}/g).map(binaryStringToInt));
				}

				const fMap = {
				    fp32: {
				        eBits: 8,
				        sBits: 23,
				        eNorm: 127,
				        convFunc: float32ToOctets
				    },
				    fp64: {
				        eBits: 11,
				        sBits: 52,
				        eNorm: 1023,
				        convFunc: float64ToOctets
				    }
				};

				function toIEEE754Parsed(v, fType) {
				    const string = octetsToBinaryString(fMap[fType].convFunc(v));
				    const parts = string.match(new RegExp(`^(.)(.{${fMap[fType].eBits}})(.{${fMap[fType].sBits}})$`));
				    // sign{1} exponent{8/11} fraction{23/52}

				    const bSign = parts[1];
				    const sign = Math.pow(-1, parseInt(bSign, 2));

				    const bExponent = parts[2];
				    const exponent = parseInt(bExponent, 2);

				    const exponentNormalized = exponent - fMap[fType].eNorm;
				    const bSignificand = parts[3];

				    const bHidden = (exponent === 0) ? "0" : "1";

				    return {
				        value: v,
				        bFull: bSign + bExponent + bHidden + bSignificand,
				        bSign: bSign,
				        bExponent: bExponent,
				        bHidden: bHidden,
				        bSignificand: bSignificand,
				        sign: sign,
				        exponent: exponent,
				        exponentNormalized: exponentNormalized,
				    };
				}

				module.exports = {
				    // float64ToOctets: float64ToOctets,
				    // octetsToFloat64: octetsToFloat64,
				    // float32ToOctets: float32ToOctets,
				    // octetsToFloat32: octetsToFloat32,
				    intToBinaryString: intToBinaryString,
				    // binaryStringToInt: binaryStringToInt,
				    // octetsToBinaryString: octetsToBinaryString,
				    // float32ToBinaryString: float32ToBinaryString,
				    binaryStringToFloat32: binaryStringToFloat32,
				    // float64ToBinaryString: float64ToBinaryString,
				    binaryStringToFloat64: binaryStringToFloat64,
				    toIEEE754Parsed: toIEEE754Parsed
				};
			}
		}
	}
})("ieee754-visualization/src/bits");
